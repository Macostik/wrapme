//
//  RecentUpdatesViewController.swift
//  meWrap
//
//  Created by Sergey Maximenko on 11/13/15.
//  Copyright Â© 2015 Ravenpod. All rights reserved.
//

import UIKit

let WhatsUpCommentHorizontalSpacing: CGFloat = 144.0
let PaddingCell: CGFloat = 24.0

class RecentUpdateCell: StreamReusableView {
    
    @IBOutlet var pictureView: WLImageView!
    @IBOutlet var userNameLabel: UILabel!
    @IBOutlet var inWrapLabel: UILabel!
    @IBOutlet var textView: UILabel!
    @IBOutlet var wrapImageView: WLImageView!
    @IBOutlet var timeLabel: UILabel!

    override func setup(entry: AnyObject!) {
        if let event = entry as? WhatsUpEvent {
            let contribution = event.contribution
            contribution.markAsRead()
            timeLabel.text = event.date?.timeAgoStringAtAMPM()
            wrapImageView.url = contribution.picture?.medium
        }
    }

}

class RecentCommentCell: RecentUpdateCell {

    override func setup(entry: AnyObject!) {
        if let event = entry as? WhatsUpEvent, let comment = event.contribution as? Comment {
            super.setup(entry)
            pictureView.url = comment.contributor?.picture?.small
            userNameLabel.text = "\(comment.contributor?.name ?? ""):"
            inWrapLabel.text = comment.candy?.wrap?.name
            textView.text = comment.text
        }
    }

}

class RecentCandyCell: RecentUpdateCell {

    @IBOutlet weak var videoIndicator: UILabel!
    
    override func setup(entry: AnyObject!) {
        if let event = entry as? WhatsUpEvent, let candy = event.contribution as? Candy {
            super.setup(entry)
            if event.event == .Update {
                pictureView.url = candy.editor?.picture?.small
                userNameLabel.text = String(format: "formatted_edited_by".ls, candy.editor?.name ?? "")
            } else {
                pictureView.url = candy.contributor?.picture?.small
                userNameLabel.text = "\(candy.contributor?.name ?? "")) \((candy.isVideo ? "posted_new_video" : "posted_new_photo").ls)"
            }
            inWrapLabel.text = candy.wrap?.name
            videoIndicator.hidden = candy.mediaType != .Video
        }
    }
}

class RecentUpdatesViewController: WLBaseViewController {

    var dataSource: StreamDataSource!
    @IBOutlet weak var streamView: StreamView!
    
    var events: NSMutableOrderedSet? {
        didSet {
            dataSource.items = events
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        dataSource = StreamDataSource(streamView: streamView)
        dataSource.autogeneratedPlaceholderMetrics.identifier = "WhatsUpPlaceholderView"
        let candyMetrics = dataSource.addMetrics(StreamMetrics(identifier: "RecentCandyCell"))
        let commentMetrics = dataSource.addMetrics(StreamMetrics(identifier: "RecentCommentCell"))
        
        candyMetrics.size = Constants.screenWidth / 3
        candyMetrics.insetsAt = { (position, metrics) -> CGRect in
            return CGRect.zero.offsetBy(dx: 0, dy: position.index == 0 ? 0 : Constants.pixelSize)
        }
        
        commentMetrics.size = candyMetrics.size
        commentMetrics.insetsAt = { (position, metrics) -> CGRect in
            return CGRect.zero.offsetBy(dx: 0, dy: position.index == 0 ? 0 : Constants.pixelSize)
        }
        
        candyMetrics.hiddenAt = {[weak self] (position, metrics) -> Bool in
            let event = self?.events?[position.index]
            return !(event?.contribution is Candy)
        }
        
        commentMetrics.hiddenAt = {[weak self] (position, metrics) -> Bool in
            let event = self?.events?[position.index]
            return !(event?.contribution is Comment)
        }
        
        let itemSelected = { (item: StreamItem?, entry: AnyObject?) -> Void in
            if let event = entry as? WhatsUpEvent {
                ChronologicalEntryPresenter.presentEntry(event.contribution, animated: true)
            }
        }
        
        candyMetrics.selection = itemSelected
        commentMetrics.selection =  itemSelected
        
        events = NSMutableOrderedSet(orderedSet: WLWhatsUpSet.sharedSet().entries)
        Wrap.notifier().addReceiver(self)
        WLWhatsUpSet.sharedSet().broadcaster.addReceiver(self)
    }
    
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        WLWhatsUpSet.sharedSet().update({ () -> Void in
            }) {(error) -> Void in
        }
    }
}

extension RecentUpdatesViewController: EntryNotifying {
    func notifier(notifier: EntryNotifier, willDeleteEntry entry: Entry) {
//        [WLToast showMessageForUnavailableWrap:(Wrap *)entry];
    }
}

extension RecentUpdatesViewController: WLWhatsUpSetBroadcastReceiver {
    func whatsUpBroadcaster(broadcaster: WLBroadcaster!, updated set: WLWhatsUpSet!) {
        events = NSMutableOrderedSet(orderedSet: set.entries)
    }
}
