//
//  CountriesViewController.swift
//  meWrap
//
//  Created by Sergey Maximenko on 2/4/16.
//  Copyright Â© 2016 Ravenpod. All rights reserved.
//

import UIKit
import SnapKit

class CountryCell: StreamReusableView {
    
    weak var countryNameLabel: UILabel!
    
    override func layoutWithMetrics(metrics: StreamMetrics) {
        let countryNameLabel = Label(preset: FontPreset.Normal, weight: UIFontWeightRegular, textColor: Color.grayDark)
        addSubview(countryNameLabel)
        self.countryNameLabel = countryNameLabel
        let separator = SeparatorView(color: Color.grayLightest)
        addSubview(separator)
        countryNameLabel.snp_makeConstraints { (make) -> Void in
            make.left.right.equalTo(self).offset(10)
            make.centerY.equalTo(self)
        }
        separator.snp_makeConstraints { (make) -> Void in
            make.height.equalTo(1)
            make.left.right.bottom.equalTo(self)
        }
    }
    
    override func setup(entry: AnyObject) {
        if let country = entry as? Country {
            countryNameLabel.text = country.name
        }
    }
    
    override var selected: Bool {
        didSet {
            backgroundColor = selected ? UIColor(white:0.9, alpha:1) : UIColor.whiteColor()
        }
    }
}

class CountriesViewController: WLBaseViewController {
    
    var selectedCountry: Country?
    
    var selectionBlock: (Country -> Void)?
    
    @IBOutlet var dataSource: StreamDataSource!

    override func viewDidLoad() {
        super.viewDidLoad()

        dataSource.autogeneratedMetrics.loader = LayoutStreamLoader<CountryCell>()
        
        dataSource.autogeneratedMetrics.selection = { [weak self] item, entry in
            item?.selected = true
            if let country = entry as? Country {
                self?.selectionBlock?(country)
            }
        }
        
        dataSource.didLayoutItemBlock = { [weak self] item in
            if let country = item.entry as? Country where country.code == self?.selectedCountry?.code {
                item.selected = true
            }
        }
        
        Dispatch.defaultQueue.fetch({ return Country.allCountries }) { [weak self] (object) -> Void in
                self?.dataSource.items = object as? [Country]
                self?.dataSource.streamView?.scrollToItem(self?.dataSource.streamView?.selectedItem, animated: false)
        }
    }

    override func preferredStatusBarStyle() -> UIStatusBarStyle {
        return .Default
    }
}
