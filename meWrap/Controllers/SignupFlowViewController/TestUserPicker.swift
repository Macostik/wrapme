//
//  TestUserPicker.swift
//  meWrap
//
//  Created by Sergey Maximenko on 2/4/16.
//  Copyright Â© 2016 Ravenpod. All rights reserved.
//

import UIKit
import SnapKit

class TestUserCell: StreamReusableView {
    
    @IBOutlet weak var phone: UILabel!
    @IBOutlet weak var email: UILabel!
    @IBOutlet weak var deviceUID: UILabel!
    @IBOutlet weak var active: UIView!
    
    override func setup(entry: AnyObject!) {
        if let authorization = entry as? Authorization {
            phone.text = authorization.fullPhoneNumber
            email.text = authorization.email
            deviceUID.text = authorization.deviceUID
            active.hidden = authorization.password?.isEmpty ?? true
        }
    }
}

final class TestUserPicker: UIView {
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.text = "Select user"
        label.textColor = UIColor.whiteColor()
        return label
    }()
    
    private let closeButton: UIButton = {
        let button = UIButton(type: .Custom)
        button.setTitle("Close", forState: .Normal)
        return button
    }()
    
    private let navigationBar: UIView = {
        let view = UIView()
        view.backgroundColor = Color.orange
        return view
    }()
    
    private let streamView = StreamView()
    
    private var dataSource: StreamDataSource!
    
    private lazy var authorizations = Environment.currentEnvironment.testUsers()

    class func showInView(view: UIView, selection: Authorization -> Void) {
        TestUserPicker(frame: view.bounds).showInView(view, selection: selection)
    }
    
    private func showInView(view: UIView, selection: Authorization -> Void) {
        backgroundColor = UIColor.whiteColor()
        dataSource = StreamDataSource(streamView: streamView)
        dataSource.autogeneratedMetrics.change {
            $0.identifier = "TestUserCell"
            $0.size = 110
            $0.selection = { item, entry in
                selection(entry as! Authorization)
            }
        }
        navigationBar.addSubview(closeButton)
        navigationBar.addSubview(titleLabel)
        addSubview(navigationBar)
        addSubview(streamView)
        view.addSubview(self)
        
        navigationBar.snp_makeConstraints { (make) -> Void in
            make.top.left.right.equalTo(self)
            make.height.equalTo(64)
        }
        
        closeButton.snp_makeConstraints { (make) -> Void in
            make.centerY.equalTo(navigationBar).offset(10)
            make.left.equalTo(navigationBar).offset(12)
        }
        
        titleLabel.snp_makeConstraints { (make) -> Void in
            make.centerY.equalTo(navigationBar).offset(10)
            make.centerX.equalTo(navigationBar)
        }
        
        streamView.snp_makeConstraints { (make) -> Void in
            make.top.equalTo(navigationBar.snp_bottom)
            make.bottom.left.right.equalTo(self)
        }
        
        layoutIfNeeded()
        dataSource.items = authorizations
        closeButton.addTarget(self, action: "removeFromSuperview", forControlEvents: .TouchUpInside)
    }
}
