//
//  WLWrapPickerViewController.m
//  meWrap
//
//  Created by Ravenpod on 6/12/15.
//  Copyright (c) 2015 Ravenpod. All rights reserved.
//

#import "WLWrapPickerViewController.h"
#import "WLToast.h"
#import "WLButton.h"
#import "WLKeyboard.h"
#import "WLUploadingQueue.h"
#import "WLUploading+Extended.h"

@interface WLWrapPickerViewController () <UITextFieldDelegate, EntryNotifying>

@property (strong, nonatomic) IBOutlet WrapPickerDataSource *dataSource;

@property (weak, nonatomic) IBOutlet UITextField *wrapNameTextField;

@property (strong, nonatomic) IBOutlet LayoutPrioritizer *editingPrioritizer;

@end

@implementation WLWrapPickerViewController

- (void)dealloc {
    [self.dataSource.streamView removeObserver:self forKeyPath:@"contentOffset" context:NULL];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    __weak StreamDataSource *dataSource = self.dataSource;
    __weak StreamView *streamView = dataSource.streamView;
    
    CGFloat itemHeight = dataSource.autogeneratedMetrics.size;
    
    streamView.contentInset = streamView.scrollIndicatorInsets = UIEdgeInsetsMake(itemHeight, 0, itemHeight, 0);
    
    __weak typeof(self)weakSelf = self;
    [dataSource.autogeneratedMetrics setSelection:^(StreamItem *item, Wrap *wrap) {
        NSUInteger index = [(NSOrderedSet*)dataSource.items indexOfObject:wrap];
        if (index != NSNotFound && streamView.contentOffset.y != index * itemHeight) {
            [streamView setContentOffset:CGPointMake(0, index * itemHeight) animated:YES];
        } else {
            run_after_asap(^{
                [weakSelf.delegate wrapPickerViewControllerDidFinish:weakSelf];
            });
        }
    }];
    
    dataSource.items = [[User currentUser] sortedWraps];
    
    if (self.wrap) {
        NSUInteger index = [(NSOrderedSet*)dataSource.items indexOfObject:self.wrap];
        if (index != NSNotFound) {
            [streamView setContentOffset:CGPointMake(0, index * itemHeight) animated:NO];
        }
    }
    
    [[Wrap notifyReceiver:self] setup:^(EntryNotifyReceiver *receiver) {
        receiver.willDelete = ^ (Entry *entry) {
            dataSource.items = [(NSMutableOrderedSet*)dataSource.items remove:(Wrap*)entry];
        };
        receiver.didAdd = ^ (Entry *entry) {
            dataSource.items = [[User currentUser] sortedWraps];
        };
        receiver.didUpdate = ^ (Entry *entry, EntryUpdateEvent event) {
            dataSource.items = [[User currentUser] sortedWraps];
        };
    }];
    
    [self.view addGestureRecognizer:streamView.panGestureRecognizer];
    
    [streamView addObserver:self forKeyPath:@"contentOffset" options:NSKeyValueObservingOptionNew context:NULL];
    
    self.wrapNameTextField.placeholder = @"new_wrap".ls;
    if (self.wrap == nil) {
        self.editingPrioritizer.defaultState = YES;
        [self.wrapNameTextField performSelector:@selector(becomeFirstResponder) withObject:nil afterDelay:0.0f];
    }
}

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    if ([keyPath isEqualToString:@"contentOffset"]) {
        NSOrderedSet *wraps = (NSOrderedSet*)self.dataSource.items;
        CGFloat offset = self.dataSource.streamView.contentOffset.y;
        if (wraps.nonempty && offset >= 0) {
            NSInteger index = roundf(offset / self.dataSource.autogeneratedMetrics.size);
            Wrap *wrap = [wraps tryAt:index];
            if (wrap && wrap != self.wrap) {
                self.wrap = wrap;
                [self.delegate wrapPickerViewController:self didSelectWrap:wrap];
            }
        }
    }
}

- (void)showInViewController:(UIViewController*)controller animated:(BOOL)animated {
    self.view.frame = controller.view.bounds;
    [controller addChildViewController:self];
    [self viewWillAppear:animated];
    [controller.view addSubview:self.view];
    [self viewDidAppear:animated];
}

- (void)hide {
    [self.view endEditing:YES];
    [self viewWillDisappear:NO];
    [self.view removeFromSuperview];
    [self viewDidDisappear:NO];
    [self removeFromParentViewController];
}

- (IBAction)hide:(id)sender {
    if (self.wrapNameTextField.isFirstResponder) {
        [self.wrapNameTextField resignFirstResponder];
    } else {
        [self.delegate wrapPickerViewControllerDidCancel:self];
    }
}

- (BOOL)prefersStatusBarHidden {
    return YES;
}

- (UIStatusBarAnimation)preferredStatusBarUpdateAnimation {
    return UIStatusBarAnimationSlide;
}

// MARK: - WLAddWrapPickerViewDelegate

- (CGFloat)constantForKeyboardAdjustmentBottomConstraint:(NSLayoutConstraint *)constraint defaultConstant:(CGFloat)defaultConstant keyboardHeight:(CGFloat)keyboardHeight {
    CGFloat adjustment = keyboardHeight - (self.view.height - CGRectGetMaxY(self.dataSource.streamView.frame) - 10);
    return MAX(0, adjustment);
}

// MARK: - UITextFieldDelegate

- (void)textFieldDidBeginEditing:(UITextField *)textField {
    self.wrapNameTextField.placeholder = @"what_is_new_wrap_about".ls;
    [self.editingPrioritizer setDefaultState:NO animated:YES];
}

- (void)textFieldDidEndEditing:(UITextField *)textField {
    self.wrapNameTextField.placeholder = @"new_wrap".ls;
    [self.editingPrioritizer setDefaultState:YES animated:YES];
}

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
    BOOL shouldBeginEditing = self.dataSource.streamView.contentOffset.y == -self.dataSource.autogeneratedMetrics.size;
    if (!shouldBeginEditing) {
        self.dataSource.didEndScrollingAnimationBlock = ^{
            [textField becomeFirstResponder];
        };
        [self.dataSource.streamView setContentOffset:CGPointMake(0, -self.dataSource.autogeneratedMetrics.size) animated:YES];
    }
    return shouldBeginEditing;
}

- (IBAction)textFieldDidChange:(UITextField *)textField {
    NSString *text = textField.text;
    if (text.length > WLProfileNameLimit) {
        text = textField.text = [text substringToIndex:WLProfileNameLimit];
    }
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    [textField resignFirstResponder];
    return YES;
}

- (IBAction)createNewWrap:(id)sender {
    [self.wrapNameTextField becomeFirstResponder];
}

- (IBAction)saveNewWrap:(WLButton*)sender {
    
    NSString *name = [self.wrapNameTextField.text trim];
    if (!name.nonempty) {
        [WLToast showWithMessage:@"wrap_name_cannot_be_blank".ls];
        return;
    }
    
    [self.wrapNameTextField resignFirstResponder];
    Wrap *wrap = [Wrap wrap];
    wrap.name = name;
    [wrap notifyOnAddition];
    [self.delegate wrapPickerViewController:self didSelectWrap:wrap];
    [self.delegate wrapPickerViewControllerDidFinish:self];
    [WLUploadingQueue upload:[Uploading uploading:wrap] success:^(id object) {
    } failure:^(NSError *error) {
        if (![error isNetworkError]) {
            [error show];
            [wrap remove];
        }
    }];
}

@end

@implementation WLWrapPickerCollectionViewLayout : UICollectionViewFlowLayout

- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect {
    return [[super layoutAttributesForElementsInRect:rect] map:^id(UICollectionViewLayoutAttributes *attributes) {
        return [self adjustAttributes:attributes];
    }];
}

- (UICollectionViewLayoutAttributes*)adjustAttributes:(UICollectionViewLayoutAttributes*)attributes {
#warning implement stream view items transform
    CGFloat centerY = attributes.frame.origin.y - self.collectionView.contentOffset.y + attributes.frame.size.height/2;
    CGFloat size = self.collectionView.height/2;
    CGFloat offset = (centerY - size)/size;
    attributes.transform3D = CATransform3DMakeRotation((M_PI / 2.7) * offset, 1, 0, 0);
    attributes.transform3D = CATransform3DTranslate(attributes.transform3D, 0, 0, 10 * ABS(offset));
    attributes.alpha = 1 - ABS(offset);
    return attributes;
}

- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath {
    return [self adjustAttributes:[super layoutAttributesForItemAtIndexPath:indexPath]];
}

- (UICollectionViewLayoutAttributes *)layoutAttributesForSupplementaryViewOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)indexPath {
    return [self adjustAttributes:[super layoutAttributesForSupplementaryViewOfKind:elementKind atIndexPath:indexPath]];
}

- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds {
    return YES;
}

@end
