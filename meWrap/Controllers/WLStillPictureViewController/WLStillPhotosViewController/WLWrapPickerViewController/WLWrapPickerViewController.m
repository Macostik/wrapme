//
//  WLWrapPickerViewController.m
//  meWrap
//
//  Created by Ravenpod on 6/12/15.
//  Copyright (c) 2015 Ravenpod. All rights reserved.
//

#import "WLWrapPickerViewController.h"

@interface WLWrapPickerViewController () <UITextFieldDelegate, EntryNotifying>

@property (strong, nonatomic) IBOutlet WrapPickerDataSource *dataSource;

@property (strong, nonatomic) EntryNotifyReceiver *wrapNotifyReceiver;

@end

@implementation WLWrapPickerViewController

- (void)dealloc {
    [self.dataSource.streamView removeObserver:self forKeyPath:@"contentOffset" context:NULL];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    __weak StreamDataSource *dataSource = self.dataSource;
    __weak StreamView *streamView = dataSource.streamView;
    
    CGFloat itemHeight = dataSource.autogeneratedMetrics.size;
    
    streamView.contentInset = streamView.scrollIndicatorInsets = UIEdgeInsetsMake(itemHeight, 0, itemHeight, 0);
    
    __weak typeof(self)weakSelf = self;
    [dataSource.autogeneratedMetrics setSelection:^(StreamItem *item, Wrap *wrap) {
        if (![weakSelf scrollToWrap:wrap]) {
            [[Dispatch mainQueue] async:^{
                [weakSelf.delegate wrapPickerViewControllerDidFinish:weakSelf];
            }];
        }
    }];
    
    dataSource.items = [[User currentUser] sortedWraps];
    
    if (self.wrap) {
        [self scrollToWrap:self.wrap];
    }
    
    self.wrapNotifyReceiver = [[Wrap notifyReceiver] setup:^(EntryNotifyReceiver *receiver) {
        receiver.willDelete = ^ (Entry *entry) {
            NSMutableArray *wraps = [NSMutableArray arrayWithArray:(NSArray*)dataSource.items];
            [wraps removeObject:entry];
            dataSource.items = [NSArray arrayWithArray:wraps];
        };
        receiver.didAdd = ^ (Entry *entry) {
            dataSource.items = [[User currentUser] sortedWraps];
        };
        receiver.didUpdate = ^ (Entry *entry, EntryUpdateEvent event) {
            dataSource.items = [[User currentUser] sortedWraps];
        };
    }];
    
    [self.view addGestureRecognizer:streamView.panGestureRecognizer];
    
    [streamView addObserver:self forKeyPath:@"contentOffset" options:NSKeyValueObservingOptionNew context:NULL];
}

- (BOOL)scrollToWrap:(Wrap*)wrap {
    __weak StreamDataSource *dataSource = self.dataSource;
    __weak StreamView *streamView = dataSource.streamView;
    CGFloat itemHeight = dataSource.autogeneratedMetrics.size;
    NSUInteger index = [(NSArray*)dataSource.items indexOfObject:wrap];
    CGFloat offset = index * itemHeight - itemHeight;
    if (index != NSNotFound && streamView.contentOffset.y != offset) {
        [streamView setContentOffset:CGPointMake(0, offset) animated:YES];
        return YES;
    } else {
        return NO;
    }
}

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    if ([keyPath isEqualToString:@"contentOffset"]) {
        __weak StreamDataSource *dataSource = self.dataSource;
        __weak StreamView *streamView = dataSource.streamView;
        CGFloat itemHeight = dataSource.autogeneratedMetrics.size;
        NSArray *wraps = (NSArray*)dataSource.items;
        CGFloat offset = streamView.contentOffset.y + itemHeight;
        if (wraps.nonempty && offset >= 0) {
            NSInteger index = roundf(offset / itemHeight);
            Wrap *wrap = [wraps tryAt:index];
            if (wrap && wrap != self.wrap) {
                self.wrap = wrap;
                [self.delegate wrapPickerViewController:self didSelectWrap:wrap];
            }
        }
    }
}

- (void)showInViewController:(UIViewController*)controller animated:(BOOL)animated {
    self.view.frame = controller.view.bounds;
    [controller addChildViewController:self];
    [self viewWillAppear:animated];
    [controller.view addSubview:self.view];
    [self viewDidAppear:animated];
}

- (void)hide {
    [self.view endEditing:YES];
    [self viewWillDisappear:NO];
    [self.view removeFromSuperview];
    [self viewDidDisappear:NO];
    [self removeFromParentViewController];
}

- (IBAction)hide:(id)sender {
    [self.delegate wrapPickerViewControllerDidCancel:self];
}

- (BOOL)prefersStatusBarHidden {
    return YES;
}

- (UIStatusBarAnimation)preferredStatusBarUpdateAnimation {
    return UIStatusBarAnimationSlide;
}

@end
