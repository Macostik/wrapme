//
//  WrapListViewController.swift
//  meWrap
//
//  Created by Yura Granchenko on 25/02/16.
//  Copyright Â© 2016 Ravenpod. All rights reserved.
//

import Foundation

class WrapListViewController: BaseViewController {
    
    static var isWrapListPresented = false
    
    var sharePath: String? = nil
    
    private lazy var url: NSURL = {
        guard var url = NSFileManager.defaultManager().containerURLForSecurityApplicationGroupIdentifier(Constants.groupIdentifier) else { return NSURL(fileURLWithPath: "") }
        return url.URLByAppendingPathComponent("ShareExtension/" + (self.sharePath ?? ""))
    }()
    
    private lazy var mutableAsset: MutableAsset? = {
        let asset = MutableAsset()
        guard let sharePath = self.sharePath else { return nil }
        if sharePath.hasSuffix("jpeg") {
            guard let image = UIImage(data: self.shareData) else { return nil }
            asset.setImage(image)
        } else {
            asset.setVideoAtPath(self.url.path!)
        }
        return asset
    }()
    
    private lazy var shareData: NSData = {
        return NSFileManager.defaultManager().contentsAtPath(self.url.path!) ?? NSData()
    }()
    
    
    @IBOutlet var wrapListDataSource: PaginatedStreamDataSource!
    @IBOutlet weak var streamView: StreamView!
    @IBOutlet weak var searchField: TextField!
    
    deinit {
        WrapListViewController.isWrapListPresented = false
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        WrapListViewController.isWrapListPresented = true
        
        wrapListDataSource.placeholderMetrics = StreamMetrics(loader: PlaceholderView.sharePlaceholderLoader())
        wrapListDataSource.autogeneratedMetrics.modifyItem = { [weak self] item in
            let wrap = item.entry as! Wrap
            if let text = self?.searchField?.text where !text.isEmpty {
                item.hidden = wrap.name?.rangeOfString(text, options: .CaseInsensitiveSearch, range: nil, locale: nil) == nil
            } else {
                item.hidden = false
            }
        }
        wrapListDataSource.autogeneratedMetrics.selection = { [weak self] item, entry in
            self?.shareContent(entry as! Wrap)
        }
        wrapListDataSource.items = PaginatedList(entries:User.currentUser?.sortedWraps ?? [], request:PaginatedRequest.wraps(nil))
    }
    
    @IBAction func cancel(sender: AnyObject?) {
        self.navigationController?.popViewControllerAnimated(false)
    }
    
    //MARK: UITextFiealDelegate
    
    @IBAction func searchTextChanged(sender: UITextField) {
        streamView.reload()
    }
    
    func shareContent(wrap: Wrap) {
        guard let sharePath = sharePath else { return }
        let manager = NSFileManager.defaultManager()
        guard let path = url.path else { return }
        if manager.fileExistsAtPath(path) {
            if sharePath.hasSuffix("txt") {
                guard let text = String(data: shareData, encoding: NSUTF8StringEncoding) else { return }
                Storyboard.Wrap.instantiate({
                    $0.segment = .Chat
                    $0.wrap = wrap
                    $0.presentedText = text
                    $0.showKeyboard = true
                    self.navigationController?.pushViewController($0, animated: false)
                })
            } else if sharePath.hasSuffix("jpeg") || sharePath.hasSuffix("mp4") {
                if case let asset = AVAsset(URL: NSURL(fileURLWithPath: url.path!))
                    where asset.duration >= CMTimeMakeWithSeconds(Constants.maxVideoRecordedDuration + 1, 1) {
                        cancel(nil)
                        Toast.show(String(format:"formatted_upload_video_duration_limit".ls, Constants.maxVideoRecordedDuration))
                        return
                }
                Storyboard.UploadSummary.instantiate({
                    guard let mutableAsset = mutableAsset else { return }
                    $0.assets = [mutableAsset]
                    $0.delegate = self
                    $0.wrap = wrap
                    self.navigationController?.pushViewController($0, animated: false)
                })
            }
        }
    }
}

extension WrapListViewController: UploadSummaryViewControllerDelegate {
    
    func uploadSummaryViewController(controller: UploadSummaryViewController, didDeselectAsset asset: MutableAsset) {}
    
    func uploadSummaryViewController(controller: UploadSummaryViewController, didFinishWithAssets assets: [MutableAsset]) {
        self.navigationController?.popToRootViewControllerAnimated(false)
        SoundPlayer.player.play(.s04)
        controller.wrap?.uploadAssets(assets)
    }
}

