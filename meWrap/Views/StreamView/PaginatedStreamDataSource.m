//
//  PaginatedStreamDataSource.m
//  Moji
//
//  Created by Sergey Maximenko on 8/18/15.
//  Copyright (c) 2015 Ravenpod. All rights reserved.
//

#import "PaginatedStreamDataSource.h"
#import "WLStreamLoadingView.h"
#import "WLNetwork.h"

@interface PaginatedStreamDataSource () <WLPaginatedSetDelegate, WLNetworkReceiver>

@end

@implementation PaginatedStreamDataSource

@dynamic items;

- (void)didAwake {
    [super didAwake];
    
    __weak typeof(self)weakSelf = self;
    self.loadingMetrics = [self addFooterMetrics:[[WLStreamLoadingView streamLoadingMetrics] change:^(StreamMetrics *metrics) {
        [metrics setSizeAt:^CGFloat(StreamPosition *position, StreamMetrics *metrics) {
            if (weakSelf.streamView.horizontal) {
                return weakSelf.streamView.fittingContentWidth;
            } else {
                return weakSelf.streamView.fittingContentHeight;
            }
        }];
        metrics.hidden = YES;
    }]];
}

- (void)setLoading:(BOOL)loading {
    if (![WLNetwork network].reachable) {
        loading = NO;
    }
    BOOL hidePlaceholder = loading;
    BOOL hideLoadingView = !loading;
    if (self.autogeneratedPlaceholderMetrics.hidden != hidePlaceholder || self.loadingMetrics.hidden != hideLoadingView) {
        self.autogeneratedPlaceholderMetrics.hidden = hidePlaceholder;
        self.loadingMetrics.hidden = hideLoadingView;
        [self reload];
    }
}

- (void)setItems:(WLPaginatedSet *)items {
    items.delegate = self;
    [self setLoading:(items.count == 0 && !items.completed)];
    [super setItems:items];
}

- (void)refresh {
    [self refresh:nil failure:nil];
}

- (void)refresh:(WLObjectBlock)success failure:(WLFailureBlock)failure {
    [self.items newer:success failure:failure];
}

- (BOOL)appendable {
    if (self.appendableBlock && !self.appendableBlock(self)) {
        return NO;
    }
    return self.items && !self.items.completed;
}

- (void)append:(WLObjectBlock)success failure:(WLFailureBlock)failure {
    [self.items older:success failure:failure];
}

// MARK: - WLPaginatedSetDelegate

- (void)appendItemsIfNeededWithTargetContentOffset:(CGPoint)targetContentOffset {
    StreamView *streamView = self.streamView;
    BOOL reachedRequiredOffset = NO;
    if (self.streamView.horizontal) {
        reachedRequiredOffset = (streamView.maximumContentOffset.x - targetContentOffset.x) < streamView.fittingContentWidth;
    } else {
        reachedRequiredOffset = (streamView.maximumContentOffset.y - targetContentOffset.y) < streamView.fittingContentHeight;
    }
    if (reachedRequiredOffset && [self appendable]) {
        if ([WLNetwork network].reachable) {
            [self append:nil failure:^(NSError *error) {
                [error showIgnoringNetworkError];
            }];
        } else {
            [[WLNetwork network] addReceiver:self];
        }
    }
}

- (void)setDidChange:(WLPaginatedSet *)group {
    [self reload];
}

- (void)paginatedSetDidStartLoading:(WLPaginatedSet *)set {
    [self setLoading:(set.count == 0 && !set.completed)];
}

- (void)paginatedSetDidFinishLoading:(WLPaginatedSet *)set {
    if (set.loadingTypes.count == 0) {
        [self setLoading:NO];
    } else {
        [self setLoading:(set.count == 0 && !set.completed)];
    }
}

- (void)streamViewDidLayout:(StreamView *)streamView {
    [super streamViewDidLayout:streamView];
    run_after_asap(^{
        [self appendItemsIfNeededWithTargetContentOffset:streamView.contentOffset];
    });
}

- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset {
    [self appendItemsIfNeededWithTargetContentOffset:*targetContentOffset];
}

// MARK: - WLNetworkReceiver

- (void)networkDidChangeReachability:(WLNetwork *)network {
    if (network.reachable) {
        [network removeReceiver:self];
        [self appendItemsIfNeededWithTargetContentOffset:self.streamView.contentOffset];
    }
}

@end
